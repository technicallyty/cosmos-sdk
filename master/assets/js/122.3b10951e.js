(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{773:function(l,Z,d){"use strict";d.r(Z);var c=d(1),b=Object(c.a)({},(function(){var l=this,Z=l.$createElement,d=l._self._c||Z;return d("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[d("h1",{attrs:{id:"module-simulation"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#module-simulation"}},[l._v("#")]),l._v(" Module Simulation")]),l._v(" "),d("h2",{attrs:{id:"prerequisites"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[l._v("#")]),l._v(" Prerequisites")]),l._v(" "),d("ul",[d("li",[d("RouterLink",{attrs:{to:"/using-the-sdk/simulation.html"}},[l._v("Cosmos Blockchain Simulator")])],1)]),l._v(" "),d("h2",{attrs:{id:"synopsis"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[l._v("#")]),l._v(" Synopsis")]),l._v(" "),d("p",[l._v("This document details how to define each module simulation functions to be\nintegrated with the application "),d("code",[l._v("SimulationManager")]),l._v(".")]),l._v(" "),d("ul",[d("li",[d("a",{attrs:{href:"#simulation-package"}},[l._v("Simulation package")]),l._v(" "),d("ul",[d("li",[d("a",{attrs:{href:"#store-decoders"}},[l._v("Store decoders")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#randomized-genesis"}},[l._v("Randomized genesis")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#randomized-parameters"}},[l._v("Randomized parameters")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#random-weighted-operations"}},[l._v("Random weighted operations")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#random-proposal-contents"}},[l._v("Random proposal contents")])])])]),l._v(" "),d("li",[d("a",{attrs:{href:"#registering-simulation-functions"}},[l._v("Registering the module simulation functions")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#app-simulator-manager"}},[l._v("App simulator manager")])]),l._v(" "),d("li",[d("a",{attrs:{href:"#simulation-tests"}},[l._v("Simulation tests")])])]),l._v(" "),d("h2",{attrs:{id:"simulation-package"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#simulation-package"}},[l._v("#")]),l._v(" Simulation package")]),l._v(" "),d("p",[l._v("Every module that implements the SDK simulator needs to have a "),d("code",[l._v("x/<module>/simulation")]),l._v("\npackage which contains the primary functions required by the fuzz tests: store\ndecoders, randomized genesis state and parameters, weighted operations and proposal\ncontents.")]),l._v(" "),d("h3",{attrs:{id:"store-decoders"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#store-decoders"}},[l._v("#")]),l._v(" Store decoders")]),l._v(" "),d("p",[l._v("Registering the store decoders is required for the "),d("code",[l._v("AppImportExport")]),l._v(". This allows\nfor the key-value pairs from the stores to be decoded ("),d("em",[l._v("i.e")]),l._v(" unmarshalled)\nto their corresponding types. In particular, it matches the key to a concrete type\nand then unmarshals the value from the "),d("code",[l._v("KVPair")]),l._v(" to the type provided.")]),l._v(" "),d("p",[l._v("You can use the example "),d("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/x/distribution/simulation/decoder.go",target:"_blank",rel:"noopener noreferrer"}},[l._v("here"),d("OutboundLink")],1),l._v(" from the distribution module to implement your store decoders.")]),l._v(" "),d("h3",{attrs:{id:"randomized-genesis"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#randomized-genesis"}},[l._v("#")]),l._v(" Randomized genesis")]),l._v(" "),d("p",[l._v("The simulator tests different scenarios and values for genesis parameters\nin order to fully test the edge cases of specific modules. The "),d("code",[l._v("simulator")]),l._v(" package from each module must expose a "),d("code",[l._v("RandomizedGenState")]),l._v(" function to generate the initial random "),d("code",[l._v("GenesisState")]),l._v(" from a given seed.")]),l._v(" "),d("p",[l._v("Once the module genesis parameter are generated randomly (or with the key and\nvalues defined in a "),d("code",[l._v("params")]),l._v(" file), they are marshaled to JSON format and added\nto the app genesis JSON to use it on the simulations.")]),l._v(" "),d("p",[l._v("You can check an example on how to create the randomized genesis "),d("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/x/staking/simulation/genesis.go",target:"_blank",rel:"noopener noreferrer"}},[l._v("here"),d("OutboundLink")],1),l._v(".")]),l._v(" "),d("h3",{attrs:{id:"randomized-parameter-changes"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#randomized-parameter-changes"}},[l._v("#")]),l._v(" Randomized parameter changes")]),l._v(" "),d("p",[l._v("The simulator is able to test parameter changes at random. The simulator package from each module must contain a "),d("code",[l._v("RandomizedParams")]),l._v(" func that will simulate parameter changes of the module throughout the simulations lifespan.")]),l._v(" "),d("p",[l._v("You can see how an example of what is needed to fully test parameter changes "),d("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/x/staking/simulation/params.go",target:"_blank",rel:"noopener noreferrer"}},[l._v("here"),d("OutboundLink")],1)]),l._v(" "),d("h3",{attrs:{id:"random-weighted-operations"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#random-weighted-operations"}},[l._v("#")]),l._v(" Random weighted operations")]),l._v(" "),d("p",[l._v("Operations are one of the crucial parts of the SDK simulation. They are the transactions\n("),d("code",[l._v("Msg")]),l._v(") that are simulated with random field values. The sender of the operation\nis also assigned randomly.")]),l._v(" "),d("p",[l._v("Operations on the simulation are simulated using the full "),d("RouterLink",{attrs:{to:"/core/transactions.html"}},[l._v("transaction cycle")]),l._v(" of a\n"),d("code",[l._v("ABCI")]),l._v(" application that exposes the "),d("code",[l._v("BaseApp")]),l._v(".")],1),l._v(" "),d("p",[l._v("Shown below is how weights are set:")]),l._v(" "),d("p",[d("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1),l._v(" "),d("p",[l._v("As you can see the weights are predefined in this case but there are options on how to override this behavior with different weights. One is allowing "),d("code",[l._v("*rand.Rand")]),l._v(" to define a random weight for the operation, or you can inject your own predefined weights.")]),l._v(" "),d("p",[l._v("Here is how one can override the above package "),d("code",[l._v("simappparams")]),l._v(".")]),l._v(" "),d("p",[d("tm-code-block",{staticClass:"codeblock",attrs:{language:"false",base64:"dGVzdC1zaW0tbm9uZGV0ZXJtaW5pc206CglAZWNobyAmcXVvdDtSdW5uaW5nIG5vbi1kZXRlcm1pbmlzbSB0ZXN0Li4uJnF1b3Q7CglAZ28gdGVzdCAtbW9kPXJlYWRvbmx5ICQoU0lNQVBQKSAtcnVuIFRlc3RBcHBTdGF0ZURldGVybWluaXNtIC1FbmFibGVkPXRydWUgXAoJCS1OdW1CbG9ja3M9MTAwIC1CbG9ja1NpemU9MjAwIC1Db21taXQ9dHJ1ZSAtUGVyaW9kPTAgLXYgLXRpbWVvdXQgMjRoCgp0ZXN0LXNpbS1jdXN0b20tZ2VuZXNpcy1mYXN0OgoJQGVjaG8gJnF1b3Q7UnVubmluZyBjdXN0b20gZ2VuZXNpcyBzaW11bGF0aW9uLi4uJnF1b3Q7CglAZWNobyAmcXVvdDtCeSBkZWZhdWx0LCAke0hPTUV9Ly5nYWlhZC9jb25maWcvZ2VuZXNpcy5qc29uIHdpbGwgYmUgdXNlZC4mcXVvdDsKCUBnbyB0ZXN0IC1tb2Q9cmVhZG9ubHkgJChTSU1BUFApIC1ydW4gVGVzdEZ1bGxHYWlhU2ltdWxhdGlvbiAtR2VuZXNpcz0ke0hPTUV9Ly5nYWlhZC9jb25maWcvZ2VuZXNpcy5qc29uIFwKCQktRW5hYmxlZD10cnVlIC1OdW1CbG9ja3M9MTAwIC1CbG9ja1NpemU9MjAwIC1Db21taXQ9dHJ1ZSAtU2VlZD05OSAtUGVyaW9kPTUgLXYgLXRpbWVvdXQgMjRoCgp0ZXN0LXNpbS1pbXBvcnQtZXhwb3J0OiBydW5zaW0KCUBlY2hvICZxdW90O1J1bm5pbmcgR2FpYSBpbXBvcnQvZXhwb3J0IHNpbXVsYXRpb24uIFRoaXMgbWF5IHRha2Ugc2V2ZXJhbCBtaW51dGVzLi4uJnF1b3Q7CglAJChCSU5ESVIpL3J1bnNpbSAtSm9icz00IC1TaW1BcHBQa2c9JChTSU1BUFApIDI1IDUgVGVzdEdhaWFJbXBvcnRFeHBvcnQ="}})],1),l._v(" "),d("p",[l._v("For the last test a tool called runsim  "),l._v(" is used, this is used to parallelize go test instances, provide info to Github and slack integrations to provide information to your team on how the simulations are running.")]),l._v(" "),d("h3",{attrs:{id:"random-proposal-contents"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#random-proposal-contents"}},[l._v("#")]),l._v(" Random proposal contents")]),l._v(" "),d("p",[l._v("Randomized governance proposals are also supported on the SDK simulator. Each\nmodule must define the governance proposal "),d("code",[l._v("Content")]),l._v("s that they expose and register\nthem to be used on the parameters.")]),l._v(" "),d("h2",{attrs:{id:"registering-simulation-functions"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#registering-simulation-functions"}},[l._v("#")]),l._v(" Registering simulation functions")]),l._v(" "),d("p",[l._v("Now that all the required functions are defined, we need to integrate them into the module pattern within the "),d("code",[l._v("module.go")]),l._v(":")]),l._v(" "),d("p",[d("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1),l._v(" "),d("h2",{attrs:{id:"app-simulator-manager"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#app-simulator-manager"}},[l._v("#")]),l._v(" App Simulator manager")]),l._v(" "),d("p",[l._v("The following step is setting up the "),d("code",[l._v("SimulatorManager")]),l._v(" at the app level. This\nis required for the simulation test files on the next step.")]),l._v(" "),d("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBDdXN0b21BcHAgc3RydWN0IHsKICAuLi4KICBzbSAqbW9kdWxlLlNpbXVsYXRpb25NYW5hZ2VyCn0K"}}),l._v(" "),d("p",[l._v("Then at the instantiation of the application, we create the "),d("code",[l._v("SimulationManager")]),l._v("\ninstance in the same way we create the "),d("code",[l._v("ModuleManager")]),l._v(" but this time we only pass\nthe modules that implement the simulation functions from the "),d("code",[l._v("AppModuleSimulation")]),l._v("\ninterface described above.")]),l._v(" "),d("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"ZnVuYyBOZXdDdXN0b21BcHAoLi4uKSB7CiAgLy8gY3JlYXRlIHRoZSBzaW11bGF0aW9uIG1hbmFnZXIgYW5kIGRlZmluZSB0aGUgb3JkZXIgb2YgdGhlIG1vZHVsZXMgZm9yIGRldGVybWluaXN0aWMgc2ltdWxhdGlvbnMKICBhcHAuc20gPSBtb2R1bGUuTmV3U2ltdWxhdGlvbk1hbmFnZXIoCiAgICBhdXRoLk5ld0FwcE1vZHVsZShhcHAuYWNjb3VudEtlZXBlciksCiAgICBiYW5rLk5ld0FwcE1vZHVsZShhcHAuYmFua0tlZXBlciwgYXBwLmFjY291bnRLZWVwZXIpLAogICAgc3VwcGx5Lk5ld0FwcE1vZHVsZShhcHAuc3VwcGx5S2VlcGVyLCBhcHAuYWNjb3VudEtlZXBlciksCiAgICBvdi5OZXdBcHBNb2R1bGUoYXBwLmdvdktlZXBlciwgYXBwLmFjY291bnRLZWVwZXIsIGFwcC5zdXBwbHlLZWVwZXIpLAogICAgbWludC5OZXdBcHBNb2R1bGUoYXBwLm1pbnRLZWVwZXIpLAogICAgZGlzdHIuTmV3QXBwTW9kdWxlKGFwcC5kaXN0cktlZXBlciwgYXBwLmFjY291bnRLZWVwZXIsIGFwcC5zdXBwbHlLZWVwZXIsIGFwcC5zdGFraW5nS2VlcGVyKSwKICAgIHN0YWtpbmcuTmV3QXBwTW9kdWxlKGFwcC5zdGFraW5nS2VlcGVyLCBhcHAuYWNjb3VudEtlZXBlciwgYXBwLnN1cHBseUtlZXBlciksCiAgICBzbGFzaGluZy5OZXdBcHBNb2R1bGUoYXBwLnNsYXNoaW5nS2VlcGVyLCBhcHAuYWNjb3VudEtlZXBlciwgYXBwLnN0YWtpbmdLZWVwZXIpLAogICkKCiAgLy8gcmVnaXN0ZXIgdGhlIHN0b3JlIGRlY29kZXJzIGZvciBzaW11bGF0aW9uIHRlc3RzCiAgYXBwLnNtLlJlZ2lzdGVyU3RvcmVEZWNvZGVycygpCiAgLi4uCn0K"}})],1)}),[],!1,null,null,null);Z.default=b.exports}}]);